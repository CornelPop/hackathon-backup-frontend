"""sync models

Revision ID: 2484a78753b8
Revises: 79f7d353142f
Create Date: 2025-09-09 01:56:39.267950

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '2484a78753b8'
down_revision = '79f7d353142f'
branch_labels = None
depends_on = None

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Ensure enum type exists before altering column (PostgreSQL requirement)
    role_enum = sa.Enum('operator', 'admin', 'user', name='userrole')
    role_enum.create(op.get_bind(), checkfirst=True)
    op.add_column('payment', sa.Column('fraud_type', sa.String(), nullable=True))
    op.add_column('payment', sa.Column('timestamp', sa.DateTime(), nullable=True))
    op.add_column('payment', sa.Column('sender_account', sa.String(), nullable=True))
    op.add_column('payment', sa.Column('receiver_account', sa.String(), nullable=True))
    op.add_column('payment', sa.Column('transaction_type', sa.String(), nullable=True))
    op.add_column('payment', sa.Column('merchant_category', sa.String(), nullable=True))
    op.add_column('payment', sa.Column('location', sa.String(), nullable=True))
    op.add_column('payment', sa.Column('device_used', sa.String(), nullable=True))
    op.add_column('payment', sa.Column('payment_channel', sa.String(), nullable=True))
    op.add_column('payment', sa.Column('ip_address', sa.String(), nullable=True))
    op.add_column('payment', sa.Column('device_hash', sa.String(), nullable=True))
    op.add_column('payment', sa.Column('velocity_score', sa.Float(), nullable=True))
    op.add_column('payment', sa.Column('geo_anomaly_score', sa.Float(), nullable=True))
    op.add_column('payment', sa.Column('time_since_last_txn', sa.Float(), nullable=True))
    op.add_column('payment', sa.Column('spending_deviation_score', sa.Float(), nullable=True))
    op.add_column('payment', sa.Column('fraudulent', sa.Boolean(), nullable=True))
    op.create_index(op.f('ix_payment_timestamp'), 'payment', ['timestamp'], unique=False)

    # Normalize existing role values to safe enum members (NULL or unexpected -> 'operator')
    op.execute("UPDATE users SET role = LOWER(role) WHERE role IS NOT NULL;")
    op.execute("UPDATE users SET role = 'operator' WHERE role IS NULL OR role NOT IN ('operator','admin','user');")

    # Perform explicit cast using USING clause (PostgreSQL needs this if direct cast not implicit)
    op.execute("ALTER TABLE users ALTER COLUMN role TYPE userrole USING CASE WHEN role IN ('operator','admin','user') THEN role::userrole ELSE 'operator'::userrole END;")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        'users', 'role',
        existing_type=sa.Enum('operator', 'admin', 'user', name='userrole'),
        type_=sa.VARCHAR(),
        existing_nullable=True
    )
    op.drop_index(op.f('ix_payment_timestamp'), table_name='payment')
    op.drop_column('payment', 'fraudulent')
    op.drop_column('payment', 'spending_deviation_score')
    op.drop_column('payment', 'time_since_last_txn')
    op.drop_column('payment', 'geo_anomaly_score')
    op.drop_column('payment', 'velocity_score')
    op.drop_column('payment', 'device_hash')
    op.drop_column('payment', 'ip_address')
    op.drop_column('payment', 'payment_channel')
    op.drop_column('payment', 'device_used')
    op.drop_column('payment', 'location')
    op.drop_column('payment', 'merchant_category')
    op.drop_column('payment', 'transaction_type')
    op.drop_column('payment', 'receiver_account')
    op.drop_column('payment', 'sender_account')
    op.drop_column('payment', 'timestamp')
    op.drop_column('payment', 'fraud_type')
    # Drop enum type last
    sa.Enum(name='userrole').drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###
